// This is your Prisma schema file for AgentPipe Web
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  INTERRUPTED
  ERROR
}

model Conversation {
  id              String               @id @default(cuid())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  startedAt       DateTime             @default(now())
  completedAt     DateTime?
  status          ConversationStatus   @default(ACTIVE)

  // Basic info
  name            String

  // Configuration
  mode            String               // "round-robin", "reactive", "free-form"
  maxTurns        Int?
  initialPrompt   String               @db.Text

  // Streaming source tracking
  source          String               @default("web") // "web", "cli-stream", "cli-upload"

  // System information (from CLI streaming)
  agentpipeVersion    String?
  systemOS            String?
  systemOSVersion     String?
  systemGoVersion     String?
  systemArchitecture  String?

  // Docker container tracking
  containerId     String?
  containerStatus String?              // "starting", "running", "stopped", "error"
  errorMessage    String?              @db.Text
  errorStack      String?              @db.Text

  // Aggregate metrics
  totalMessages   Int                  @default(0)
  totalTokens     Int                  @default(0)
  totalCost       Float                @default(0)
  totalDuration   Int                  @default(0) // milliseconds

  // Relations
  messages        Message[]
  participants    ConversationAgent[]

  // Additional metadata (JSON field for flexibility)
  metadata        Json?

  @@index([createdAt])
  @@index([status])
  @@index([mode])
  @@index([containerId])
  @@map("conversations")
}

model Message {
  id              String       @id @default(cuid())
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Agent information
  agentId         String
  agentName       String
  agentType       String       // Agent type: "claude", "gemini", "amp", "gpt", etc.
  agentVersion    String?      // Agent software version: "1.2.0", "0.5.0", etc.

  // Message content
  content         String       @db.Text
  role            String       // "agent", "user", "system"
  timestamp       DateTime     @default(now())

  // Message ordering (for streaming sessions)
  sequenceNumber  Int?         // Explicit ordering within conversation
  turnNumber      Int?         // Which turn in the conversation (1, 2, 3...)

  // Performance metrics
  duration        Int?         // milliseconds
  inputTokens     Int?
  outputTokens    Int?
  totalTokens     Int?
  model           String?      // AI model used: "claude-sonnet-4", "gpt-4-turbo", "gemini-pro-1.5", etc.
  cost            Float?

  @@index([conversationId, timestamp])
  @@index([conversationId, sequenceNumber])
  @@index([agentType])
  @@index([model])             // Index for filtering by AI model
  @@index([timestamp])
  @@map("messages")
}

model ConversationAgent {
  id              String       @id @default(cuid())
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // Agent configuration
  agentId         String
  agentType       String       // Agent type: "claude", "gemini", "amp", "gpt", etc.
  agentName       String
  agentVersion    String?      // Agent software version: "1.2.0", "0.5.0", etc.
  model           String?      // AI model used: "claude-sonnet-4", "gpt-4-turbo", "gemini-pro-1.5", etc.
  prompt          String?      @db.Text
  announcement    String?
  cliVersion      String?      // CLI version used to invoke this agent

  // Additional agent settings (JSON field for custom settings)
  settings        Json?

  @@unique([conversationId, agentId])
  @@index([agentType])
  @@index([model])             // Index for filtering by AI model
  @@index([agentVersion])      // Index for filtering by agent version
  @@map("conversation_agents")
}

model Event {
  id              String       @id @default(cuid())
  createdAt       DateTime     @default(now())

  // Event details
  type            String       // Event type (conversation.started, message.created, etc.)
  conversationId  String?

  // Event data
  data            Json

  // Error tracking
  errorMessage    String?      @db.Text
  errorStack      String?      @db.Text

  @@index([createdAt])
  @@index([type])
  @@index([conversationId])
  @@map("events")
}

model Setting {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Setting identification
  key         String    // e.g., "agentpipe.binary_path"
  value       String    @db.Text

  // Metadata
  description String?   @db.Text
  category    String?   // "system", "agentpipe", "ui", etc.
  dataType    String    @default("string") // "string", "number", "boolean", "json", "path"

  // Multi-tenancy support (null = system-wide)
  userId      String?

  // Validation tracking
  isValid     Boolean   @default(true)
  validatedAt DateTime?

  @@unique([key, userId])
  @@index([category])
  @@index([userId])
  @@index([key])
  @@map("settings")
}
