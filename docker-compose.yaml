version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: agentpipe-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: agentpipe
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Next.js Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agentpipe-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres@db:5432/agentpipe

      # Application
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3000

      # AgentPipe
      AGENTPIPE_BRIDGE_API_KEY: ${AGENTPIPE_BRIDGE_API_KEY:-your_bridge_api_key}

      # Supabase (optional)
      NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL:-}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY:-}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:-}
    volumes:
      # Mount Docker socket to allow spawning AgentPipe containers
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c "
        npx prisma migrate deploy &&
        node server.js
      "

volumes:
  postgres_data:
    driver: local
